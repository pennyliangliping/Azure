{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters" : {
        "newStorageAccountName": {
            "type": "string",
            "metadata": {
                "description": "Unique DNS Name for the Storage Account where the Virtual Machine's disks will be placed."
            }
        },
        "dnsNameForPIPPrefix" : {
            "type" : "string",
            "metadata": {
                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
            }
        },
        "vmNamePrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix for the VM name"
            }
        },
        "adminUserName": {
            "type": "string",
            "metadata": {
                "description": "UserName for the Virtual Machine"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Virtual Machine"
            }
        },
        "numberOfInstances": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "Number of VMs to create"
            }
        },
        "windowsOSVersion": {
            "type": "string",
            "defaultValue": "2012-R2-Datacenter",
            "allowedValues": [
                "2008-R2-SP1",
                "2012-Datacenter",
                "2012-R2-Datacenter"
            ],
            "metadata": {
                "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version. Allowed values: 2008-R2-SP1, 2012-Datacenter, 2012-R2-Datacenter."
            }
        }
    },
    "variables": {
        "location": "East Asia",
        "vmSize": "Standard_A2",
        "virtualNetworkName": "autodeployVNET",
        "nicNamePrefix": "autodeployVMNic",
        "addressPrefix":"10.0.0.0/16",
        "subnet1Name": "Subnet-1",
        "subnet1Prefix" : "10.0.0.0/24",
        "storageAccountType": "Standard_LRS",
        "vmStorageAccountContainerName": "vhds",
        "publicIPAddressType" : "Dynamic",
        "publicIPNamePrefix": "publicIP",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "subnet1Ref" : "[concat(variables('vnetID'),'/subnets/',variables('subnet1Name'))]",
        "imagePublisher": "MicrosoftWindowsServer",
        "customScriptExtensionVersion": "1.2",
        "scriptURL": "http://pennyuserimagesa.blob.core.windows.net/scripts/EnableWinRM.ps1",
        "scriptName": "EnableWinRM.ps1",
        "imageOffer": "WindowsServer"
    },
    "resources": [
    {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[parameters('newStorageAccountName')]",
        "apiVersion": "2015-05-01-preview",
        "location": "[variables('location')]",
        "properties": {
            "accountType": "[variables('storageAccountType')]"
        }
    },
    {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[concat(variables('publicIPNamePrefix'), copyIndex())]",
        "location": "[variables('location')]",
        "copy": {
            "name": "publicIPLoop",
            "count": "[parameters('numberOfInstances')]"
        },
        "properties": {
            "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
            "dnsSettings": {
                "domainNameLabel": "[concat(parameters('dnsNameForPIPPrefix'), copyIndex())]"
            }
        }
    },
    {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",
        "location": "[variables('location')]",
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "[variables('addressPrefix')]"
                ]
            },
            "subnets": [
            {
                "name": "[variables('subnet1Name')]",
                "properties" : {
                    "addressPrefix": "[variables('subnet1Prefix')]"
                }
            }
            ]
        }
    },
    {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('nicNamePrefix'), copyindex())]",
        "location": "[variables('location')]",
        "copy": {
            "name": "nicLoop",
            "count": "[parameters('numberOfInstances')]"
        },
        "dependsOn": [
            "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPNamePrefix'), copyIndex())]",
            "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
        ],
        "properties": {
            "ipConfigurations": [
            {
                "name": "ipconfig1",
                "properties": {
                    "privateIPAllocationMethod": "Dynamic",
                    "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('publicIPNamePrefix'), copyIndex()))]"
                    },
                    "subnet": {
                        "id": "[variables('subnet1Ref')]"
                    }
                }
            }
            ]
        }
    },
    {
        "apiVersion": "2015-05-01-preview",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[concat(parameters('vmNamePrefix'), copyindex())]",
        "location": "[variables('location')]",
        "copy": {
            "name": "virtualMachineLoop",
            "count": "[parameters('numberOfInstances')]"
        },
        "dependsOn": [
            "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
            "[concat('Microsoft.Network/networkInterfaces/', variables('nicNamePrefix'), copyindex())]"
        ],
        "properties": {
            "hardwareProfile": {
                "vmSize": "[variables('vmSize')]"
            },
            "osProfile": {
                "computername": "[concat(parameters('vmNamePrefix'), copyindex())]",
                "adminUsername": "[parameters('adminUsername')]",
                "adminPassword": "[parameters('adminPassword')]"
            },
            "storageProfile": {
                "imageReference": {
                    "publisher": "[variables('imagePublisher')]",
                    "offer": "[variables('imageOffer')]",
                    "sku" : "[parameters('windowsOSVersion')]",
                    "version":"latest"
                },
                "osDisk" : {
                    "name" : "[concat(parameters('vmNamePrefix'),'-osDisk',copyindex())]",
                    "caching" : "ReadWrite",
                    "createOption": "FromImage",
                    "vhd" : {
                        "uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',parameters('vmNamePrefix'), copyindex(), 'osDisk.vhd')]"
                    }
                }
            },
            "networkProfile": {
                "networkInterfaces" : [
                {
                    "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicNamePrefix'), copyindex()))]"
                }
                ]
            }
        }
    },
    {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "name": "[concat(parameters('vmNamePrefix'), copyindex(),'/enablewinrm')]",
        "apiVersion": "2015-05-01-preview",
        "location": "[variables('location')]",
        "copy": {
            "name": "vmEnableWinRMLoop",
            "count": "[parameters('numberOfInstances')]"
        },
        "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', parameters('vmNamePrefix'),copyindex())]"
        ],
        "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "[variables('customScriptExtensionVersion')]",
            "settings": {
                 "fileUris": [ "[variables('scriptURL')]" ],
                 "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -file ',variables('scriptName'))]"
            }
        }
    }
    ]
}
